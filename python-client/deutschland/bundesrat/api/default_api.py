"""
    Bundesrat: Live Informationen

    Bundesrat Informationen API   # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: kontakt@bund.dev
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from deutschland.bundesrat.api_client import ApiClient
from deutschland.bundesrat.api_client import Endpoint as _Endpoint
from deutschland.bundesrat.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types,
)


class DefaultApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client
        self.i_os_shared_docs2_mitglieder_mitglieder_table_xml_get_endpoint = _Endpoint(
            settings={
                "response_type": (str,),
                "auth": [],
                "endpoint_path": "/iOS/SharedDocs/2_Mitglieder/mitglieder_table.xml",
                "operation_id": "i_os_shared_docs2_mitglieder_mitglieder_table_xml_get",
                "http_method": "GET",
                "servers": None,
            },
            params_map={
                "all": [
                    "view",
                ],
                "required": [
                    "view",
                ],
                "nullable": [],
                "enum": [],
                "validation": [],
            },
            root_map={
                "validations": {},
                "allowed_values": {},
                "openapi_types": {
                    "view": (str,),
                },
                "attribute_map": {
                    "view": "view",
                },
                "location_map": {
                    "view": "query",
                },
                "collection_format_map": {},
            },
            headers_map={
                "accept": ["application/xml"],
                "content_type": [],
            },
            api_client=api_client,
        )
        self.i_os_shared_docs3_plenum_plenum_aktuelle_sitzung_table_xml_get_endpoint = _Endpoint(
            settings={
                "response_type": (str,),
                "auth": [],
                "endpoint_path": "/iOS/SharedDocs/3_Plenum/plenum_aktuelleSitzung_table.xml",
                "operation_id": "i_os_shared_docs3_plenum_plenum_aktuelle_sitzung_table_xml_get",
                "http_method": "GET",
                "servers": None,
            },
            params_map={
                "all": [
                    "view",
                ],
                "required": [
                    "view",
                ],
                "nullable": [],
                "enum": [],
                "validation": [],
            },
            root_map={
                "validations": {},
                "allowed_values": {},
                "openapi_types": {
                    "view": (str,),
                },
                "attribute_map": {
                    "view": "view",
                },
                "location_map": {
                    "view": "query",
                },
                "collection_format_map": {},
            },
            headers_map={
                "accept": ["application/xml"],
                "content_type": [],
            },
            api_client=api_client,
        )
        self.i_os_shared_docs3_plenum_plenum_naechste_sitzungen_xml_get_endpoint = _Endpoint(
            settings={
                "response_type": (str,),
                "auth": [],
                "endpoint_path": "/iOS/SharedDocs/3_Plenum/plenum_naechsteSitzungen.xml",
                "operation_id": "i_os_shared_docs3_plenum_plenum_naechste_sitzungen_xml_get",
                "http_method": "GET",
                "servers": None,
            },
            params_map={
                "all": [
                    "view",
                ],
                "required": [
                    "view",
                ],
                "nullable": [],
                "enum": [],
                "validation": [],
            },
            root_map={
                "validations": {},
                "allowed_values": {},
                "openapi_types": {
                    "view": (str,),
                },
                "attribute_map": {
                    "view": "view",
                },
                "location_map": {
                    "view": "query",
                },
                "collection_format_map": {},
            },
            headers_map={
                "accept": ["application/xml"],
                "content_type": [],
            },
            api_client=api_client,
        )
        self.i_os_shared_docs3_plenum_plenum_to_chronologisch_table_xml_get_endpoint = _Endpoint(
            settings={
                "response_type": (str,),
                "auth": [],
                "endpoint_path": "/iOS/SharedDocs/3_Plenum/plenum_toChronologisch_table.xml",
                "operation_id": "i_os_shared_docs3_plenum_plenum_to_chronologisch_table_xml_get",
                "http_method": "GET",
                "servers": None,
            },
            params_map={
                "all": [
                    "view",
                ],
                "required": [
                    "view",
                ],
                "nullable": [],
                "enum": [],
                "validation": [],
            },
            root_map={
                "validations": {},
                "allowed_values": {},
                "openapi_types": {
                    "view": (str,),
                },
                "attribute_map": {
                    "view": "view",
                },
                "location_map": {
                    "view": "query",
                },
                "collection_format_map": {},
            },
            headers_map={
                "accept": ["application/xml"],
                "content_type": [],
            },
            api_client=api_client,
        )
        self.i_osv301_aktuelles_aktuelles_table_xml_get_endpoint = _Endpoint(
            settings={
                "response_type": (str,),
                "auth": [],
                "endpoint_path": "/iOS/v3/01_Aktuelles/aktuelles_table.xml",
                "operation_id": "i_osv301_aktuelles_aktuelles_table_xml_get",
                "http_method": "GET",
                "servers": None,
            },
            params_map={
                "all": [
                    "view",
                ],
                "required": [
                    "view",
                ],
                "nullable": [],
                "enum": [],
                "validation": [],
            },
            root_map={
                "validations": {},
                "allowed_values": {},
                "openapi_types": {
                    "view": (str,),
                },
                "attribute_map": {
                    "view": "view",
                },
                "location_map": {
                    "view": "query",
                },
                "collection_format_map": {},
            },
            headers_map={
                "accept": ["application/xml"],
                "content_type": [],
            },
            api_client=api_client,
        )
        self.i_osv302_termine_termine_table_xml_get_endpoint = _Endpoint(
            settings={
                "response_type": (str,),
                "auth": [],
                "endpoint_path": "/iOS/v3/02_Termine/termine_table.xml",
                "operation_id": "i_osv302_termine_termine_table_xml_get",
                "http_method": "GET",
                "servers": None,
            },
            params_map={
                "all": [
                    "view",
                ],
                "required": [
                    "view",
                ],
                "nullable": [],
                "enum": [],
                "validation": [],
            },
            root_map={
                "validations": {},
                "allowed_values": {},
                "openapi_types": {
                    "view": (str,),
                },
                "attribute_map": {
                    "view": "view",
                },
                "location_map": {
                    "view": "query",
                },
                "collection_format_map": {},
            },
            headers_map={
                "accept": ["application/xml"],
                "content_type": [],
            },
            api_client=api_client,
        )
        self.i_osv303_plenum_plenum_kompakt_table_xml_get_endpoint = _Endpoint(
            settings={
                "response_type": (str,),
                "auth": [],
                "endpoint_path": "/iOS/v3/03_Plenum/plenum_kompakt_table.xml",
                "operation_id": "i_osv303_plenum_plenum_kompakt_table_xml_get",
                "http_method": "GET",
                "servers": None,
            },
            params_map={
                "all": [
                    "view",
                ],
                "required": [
                    "view",
                ],
                "nullable": [],
                "enum": [],
                "validation": [],
            },
            root_map={
                "validations": {},
                "allowed_values": {},
                "openapi_types": {
                    "view": (str,),
                },
                "attribute_map": {
                    "view": "view",
                },
                "location_map": {
                    "view": "query",
                },
                "collection_format_map": {},
            },
            headers_map={
                "accept": ["application/xml"],
                "content_type": [],
            },
            api_client=api_client,
        )
        self.i_osv305_bundesrat_praesidium_bundesrat_praesidium_xml_get_endpoint = _Endpoint(
            settings={
                "response_type": (str,),
                "auth": [],
                "endpoint_path": "/iOS/v3/05_Bundesrat/Praesidium/bundesrat_praesidium.xml",
                "operation_id": "i_osv305_bundesrat_praesidium_bundesrat_praesidium_xml_get",
                "http_method": "GET",
                "servers": None,
            },
            params_map={
                "all": [
                    "view",
                ],
                "required": [
                    "view",
                ],
                "nullable": [],
                "enum": [],
                "validation": [],
            },
            root_map={
                "validations": {},
                "allowed_values": {},
                "openapi_types": {
                    "view": (str,),
                },
                "attribute_map": {
                    "view": "view",
                },
                "location_map": {
                    "view": "query",
                },
                "collection_format_map": {},
            },
            headers_map={
                "accept": ["application/xml"],
                "content_type": [],
            },
            api_client=api_client,
        )
        self.i_osv306_stimmen_stimmverteilung_xml_get_endpoint = _Endpoint(
            settings={
                "response_type": (str,),
                "auth": [],
                "endpoint_path": "/iOS/v3/06_Stimmen/stimmverteilung.xml",
                "operation_id": "i_osv306_stimmen_stimmverteilung_xml_get",
                "http_method": "GET",
                "servers": None,
            },
            params_map={
                "all": [
                    "view",
                ],
                "required": [
                    "view",
                ],
                "nullable": [],
                "enum": [],
                "validation": [],
            },
            root_map={
                "validations": {},
                "allowed_values": {},
                "openapi_types": {
                    "view": (str,),
                },
                "attribute_map": {
                    "view": "view",
                },
                "location_map": {
                    "view": "query",
                },
                "collection_format_map": {},
            },
            headers_map={
                "accept": ["application/xml"],
                "content_type": [],
            },
            api_client=api_client,
        )
        self.i_osv3_startlist_table_xml_get_endpoint = _Endpoint(
            settings={
                "response_type": (str,),
                "auth": [],
                "endpoint_path": "/iOS/v3/startlist_table.xml",
                "operation_id": "i_osv3_startlist_table_xml_get",
                "http_method": "GET",
                "servers": None,
            },
            params_map={
                "all": [
                    "view",
                ],
                "required": [
                    "view",
                ],
                "nullable": [],
                "enum": [],
                "validation": [],
            },
            root_map={
                "validations": {},
                "allowed_values": {},
                "openapi_types": {
                    "view": (str,),
                },
                "attribute_map": {
                    "view": "view",
                },
                "location_map": {
                    "view": "query",
                },
                "collection_format_map": {},
            },
            headers_map={
                "accept": ["application/xml"],
                "content_type": [],
            },
            api_client=api_client,
        )

    def i_os_shared_docs2_mitglieder_mitglieder_table_xml_get(self, view, **kwargs):
        """Mitglieder  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.i_os_shared_docs2_mitglieder_mitglieder_table_xml_get(view, async_req=True)
        >>> result = thread.get()

        Args:
            view (str): Xml Ausabe

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            str
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs["async_req"] = kwargs.get("async_req", False)
        kwargs["_return_http_data_only"] = kwargs.get("_return_http_data_only", True)
        kwargs["_preload_content"] = kwargs.get("_preload_content", True)
        kwargs["_request_timeout"] = kwargs.get("_request_timeout", None)
        kwargs["_check_input_type"] = kwargs.get("_check_input_type", True)
        kwargs["_check_return_type"] = kwargs.get("_check_return_type", True)
        kwargs["_spec_property_naming"] = kwargs.get("_spec_property_naming", False)
        kwargs["_content_type"] = kwargs.get("_content_type")
        kwargs["_host_index"] = kwargs.get("_host_index")
        kwargs["view"] = view
        return self.i_os_shared_docs2_mitglieder_mitglieder_table_xml_get_endpoint.call_with_http_info(
            **kwargs
        )

    def i_os_shared_docs3_plenum_plenum_aktuelle_sitzung_table_xml_get(
        self, view, **kwargs
    ):
        """Plenum aktuelle Sitzung  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.i_os_shared_docs3_plenum_plenum_aktuelle_sitzung_table_xml_get(view, async_req=True)
        >>> result = thread.get()

        Args:
            view (str): Xml Ausabe

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            str
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs["async_req"] = kwargs.get("async_req", False)
        kwargs["_return_http_data_only"] = kwargs.get("_return_http_data_only", True)
        kwargs["_preload_content"] = kwargs.get("_preload_content", True)
        kwargs["_request_timeout"] = kwargs.get("_request_timeout", None)
        kwargs["_check_input_type"] = kwargs.get("_check_input_type", True)
        kwargs["_check_return_type"] = kwargs.get("_check_return_type", True)
        kwargs["_spec_property_naming"] = kwargs.get("_spec_property_naming", False)
        kwargs["_content_type"] = kwargs.get("_content_type")
        kwargs["_host_index"] = kwargs.get("_host_index")
        kwargs["view"] = view
        return self.i_os_shared_docs3_plenum_plenum_aktuelle_sitzung_table_xml_get_endpoint.call_with_http_info(
            **kwargs
        )

    def i_os_shared_docs3_plenum_plenum_naechste_sitzungen_xml_get(
        self, view, **kwargs
    ):
        """Plenum nächste Sitzung  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.i_os_shared_docs3_plenum_plenum_naechste_sitzungen_xml_get(view, async_req=True)
        >>> result = thread.get()

        Args:
            view (str): Xml Ausabe

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            str
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs["async_req"] = kwargs.get("async_req", False)
        kwargs["_return_http_data_only"] = kwargs.get("_return_http_data_only", True)
        kwargs["_preload_content"] = kwargs.get("_preload_content", True)
        kwargs["_request_timeout"] = kwargs.get("_request_timeout", None)
        kwargs["_check_input_type"] = kwargs.get("_check_input_type", True)
        kwargs["_check_return_type"] = kwargs.get("_check_return_type", True)
        kwargs["_spec_property_naming"] = kwargs.get("_spec_property_naming", False)
        kwargs["_content_type"] = kwargs.get("_content_type")
        kwargs["_host_index"] = kwargs.get("_host_index")
        kwargs["view"] = view
        return self.i_os_shared_docs3_plenum_plenum_naechste_sitzungen_xml_get_endpoint.call_with_http_info(
            **kwargs
        )

    def i_os_shared_docs3_plenum_plenum_to_chronologisch_table_xml_get(
        self, view, **kwargs
    ):
        """Plenum Chronologisch  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.i_os_shared_docs3_plenum_plenum_to_chronologisch_table_xml_get(view, async_req=True)
        >>> result = thread.get()

        Args:
            view (str): Xml Ausabe

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            str
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs["async_req"] = kwargs.get("async_req", False)
        kwargs["_return_http_data_only"] = kwargs.get("_return_http_data_only", True)
        kwargs["_preload_content"] = kwargs.get("_preload_content", True)
        kwargs["_request_timeout"] = kwargs.get("_request_timeout", None)
        kwargs["_check_input_type"] = kwargs.get("_check_input_type", True)
        kwargs["_check_return_type"] = kwargs.get("_check_return_type", True)
        kwargs["_spec_property_naming"] = kwargs.get("_spec_property_naming", False)
        kwargs["_content_type"] = kwargs.get("_content_type")
        kwargs["_host_index"] = kwargs.get("_host_index")
        kwargs["view"] = view
        return self.i_os_shared_docs3_plenum_plenum_to_chronologisch_table_xml_get_endpoint.call_with_http_info(
            **kwargs
        )

    def i_osv301_aktuelles_aktuelles_table_xml_get(self, view, **kwargs):
        """Aktuelles  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.i_osv301_aktuelles_aktuelles_table_xml_get(view, async_req=True)
        >>> result = thread.get()

        Args:
            view (str): Xml Ausabe

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            str
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs["async_req"] = kwargs.get("async_req", False)
        kwargs["_return_http_data_only"] = kwargs.get("_return_http_data_only", True)
        kwargs["_preload_content"] = kwargs.get("_preload_content", True)
        kwargs["_request_timeout"] = kwargs.get("_request_timeout", None)
        kwargs["_check_input_type"] = kwargs.get("_check_input_type", True)
        kwargs["_check_return_type"] = kwargs.get("_check_return_type", True)
        kwargs["_spec_property_naming"] = kwargs.get("_spec_property_naming", False)
        kwargs["_content_type"] = kwargs.get("_content_type")
        kwargs["_host_index"] = kwargs.get("_host_index")
        kwargs["view"] = view
        return self.i_osv301_aktuelles_aktuelles_table_xml_get_endpoint.call_with_http_info(
            **kwargs
        )

    def i_osv302_termine_termine_table_xml_get(self, view, **kwargs):
        """Termine  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.i_osv302_termine_termine_table_xml_get(view, async_req=True)
        >>> result = thread.get()

        Args:
            view (str): Xml Ausabe

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            str
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs["async_req"] = kwargs.get("async_req", False)
        kwargs["_return_http_data_only"] = kwargs.get("_return_http_data_only", True)
        kwargs["_preload_content"] = kwargs.get("_preload_content", True)
        kwargs["_request_timeout"] = kwargs.get("_request_timeout", None)
        kwargs["_check_input_type"] = kwargs.get("_check_input_type", True)
        kwargs["_check_return_type"] = kwargs.get("_check_return_type", True)
        kwargs["_spec_property_naming"] = kwargs.get("_spec_property_naming", False)
        kwargs["_content_type"] = kwargs.get("_content_type")
        kwargs["_host_index"] = kwargs.get("_host_index")
        kwargs["view"] = view
        return self.i_osv302_termine_termine_table_xml_get_endpoint.call_with_http_info(
            **kwargs
        )

    def i_osv303_plenum_plenum_kompakt_table_xml_get(self, view, **kwargs):
        """Plenum Kompakt  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.i_osv303_plenum_plenum_kompakt_table_xml_get(view, async_req=True)
        >>> result = thread.get()

        Args:
            view (str): Xml Ausabe

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            str
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs["async_req"] = kwargs.get("async_req", False)
        kwargs["_return_http_data_only"] = kwargs.get("_return_http_data_only", True)
        kwargs["_preload_content"] = kwargs.get("_preload_content", True)
        kwargs["_request_timeout"] = kwargs.get("_request_timeout", None)
        kwargs["_check_input_type"] = kwargs.get("_check_input_type", True)
        kwargs["_check_return_type"] = kwargs.get("_check_return_type", True)
        kwargs["_spec_property_naming"] = kwargs.get("_spec_property_naming", False)
        kwargs["_content_type"] = kwargs.get("_content_type")
        kwargs["_host_index"] = kwargs.get("_host_index")
        kwargs["view"] = view
        return self.i_osv303_plenum_plenum_kompakt_table_xml_get_endpoint.call_with_http_info(
            **kwargs
        )

    def i_osv305_bundesrat_praesidium_bundesrat_praesidium_xml_get(
        self, view, **kwargs
    ):
        """Präsidium  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.i_osv305_bundesrat_praesidium_bundesrat_praesidium_xml_get(view, async_req=True)
        >>> result = thread.get()

        Args:
            view (str): Xml Ausabe

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            str
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs["async_req"] = kwargs.get("async_req", False)
        kwargs["_return_http_data_only"] = kwargs.get("_return_http_data_only", True)
        kwargs["_preload_content"] = kwargs.get("_preload_content", True)
        kwargs["_request_timeout"] = kwargs.get("_request_timeout", None)
        kwargs["_check_input_type"] = kwargs.get("_check_input_type", True)
        kwargs["_check_return_type"] = kwargs.get("_check_return_type", True)
        kwargs["_spec_property_naming"] = kwargs.get("_spec_property_naming", False)
        kwargs["_content_type"] = kwargs.get("_content_type")
        kwargs["_host_index"] = kwargs.get("_host_index")
        kwargs["view"] = view
        return self.i_osv305_bundesrat_praesidium_bundesrat_praesidium_xml_get_endpoint.call_with_http_info(
            **kwargs
        )

    def i_osv306_stimmen_stimmverteilung_xml_get(self, view, **kwargs):
        """Stimmverteilung  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.i_osv306_stimmen_stimmverteilung_xml_get(view, async_req=True)
        >>> result = thread.get()

        Args:
            view (str): Xml Ausabe

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            str
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs["async_req"] = kwargs.get("async_req", False)
        kwargs["_return_http_data_only"] = kwargs.get("_return_http_data_only", True)
        kwargs["_preload_content"] = kwargs.get("_preload_content", True)
        kwargs["_request_timeout"] = kwargs.get("_request_timeout", None)
        kwargs["_check_input_type"] = kwargs.get("_check_input_type", True)
        kwargs["_check_return_type"] = kwargs.get("_check_return_type", True)
        kwargs["_spec_property_naming"] = kwargs.get("_spec_property_naming", False)
        kwargs["_content_type"] = kwargs.get("_content_type")
        kwargs["_host_index"] = kwargs.get("_host_index")
        kwargs["view"] = view
        return (
            self.i_osv306_stimmen_stimmverteilung_xml_get_endpoint.call_with_http_info(
                **kwargs
            )
        )

    def i_osv3_startlist_table_xml_get(self, view, **kwargs):
        """Übersicht API Endpunkte  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.i_osv3_startlist_table_xml_get(view, async_req=True)
        >>> result = thread.get()

        Args:
            view (str): Xml Ausabe

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            str
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs["async_req"] = kwargs.get("async_req", False)
        kwargs["_return_http_data_only"] = kwargs.get("_return_http_data_only", True)
        kwargs["_preload_content"] = kwargs.get("_preload_content", True)
        kwargs["_request_timeout"] = kwargs.get("_request_timeout", None)
        kwargs["_check_input_type"] = kwargs.get("_check_input_type", True)
        kwargs["_check_return_type"] = kwargs.get("_check_return_type", True)
        kwargs["_spec_property_naming"] = kwargs.get("_spec_property_naming", False)
        kwargs["_content_type"] = kwargs.get("_content_type")
        kwargs["_host_index"] = kwargs.get("_host_index")
        kwargs["view"] = view
        return self.i_osv3_startlist_table_xml_get_endpoint.call_with_http_info(
            **kwargs
        )
